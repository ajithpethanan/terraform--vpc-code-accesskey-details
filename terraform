provider "aws" {
    region = "ap-south-1"
    access_key = "AKIAVRUVP45M4EGVUSJ6"
    secret_key = "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"

  
}

resource "aws_vpc" "vpc-1" {
    cidr_block = "10.0.0.0/16"

    tags = {
      Name ="vpc-1"
    }
  
}
 resource "aws_internet_gateway" "igw-1" {
    vpc_id = aws_vpc.vpc-1.id
    tags = {
      Name = "igw-1"
    }
   
 }
 resource "aws_subnet" "subnet-1" {
    vpc_id = aws_vpc.vpc-1.id
    cidr_block = "10.0.1.0/24"
    availability_zone = "ap-south-1a"
    map_public_ip_on_launch = true
    tags = {
      Name = "subnet-1"
    }
   
 }
 resource "aws_route_table" "public-route-table" {
    vpc_id = aws_vpc.vpc-1.id

    route  {
        cidr_block = "0.0.0.0/0"
        gateway_id = aws_internet_gateway.igw-1.id
    }
        tags = {
            Name = "public-route-table"
        }
    }

 resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.public-route-table.id
}
 resource "aws_security_group" "allow_ssh" {
  name        = "allow_ssh_sg"
  description = "Allow SSH traffic"
  vpc_id = aws_vpc.vpc-1.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  
  }

  
}

resource "aws_instance" "webserver" {
    ami = "ami-03f4878755434977f"
    instance_type = "t2.micro"
    subnet_id = aws_subnet.subnet-1.id
    tags = {
      Name = "ec2-1"
    }
}




provider "aws" {
  region = "us-east-1"  # Set your desired AWS region
}

# Create a security group allowing ports 22, 80, and 8080 inbound, and all outbound
resource "aws_security_group" "web_server_sg" {
  name        = "web-server-sg"
  description = "Security group for web servers"

  vpc_id = "your-vpc-id"  # Replace with your VPC ID

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create three EC2 instances with elastic IPs and associate them with the security group
resource "aws_instance" "web_servers" {
  count         = 3
  ami           = "ami-12345678"  # Replace with your desired AMI ID
  instance_type = "t2.micro"
  key_name      = "your-key-pair"  # Replace with your key pair name

  security_groups = [aws_security_group.web_server_sg.name]

  tags = {
    Name = "web-server-${count.index + 1}"
  }
}

# Allocate three Elastic IPs and associate them with the EC2 instances
resource "aws_eip" "web_server_ips" {
  count = 3
}

resource "aws_eip_association" "web_server_eip_assoc" {
  count          = 3
  instance_id    = aws_instance.web_servers[count.index].id
  allocation_id  = aws_eip.web_server_ips[count.index].id
}

